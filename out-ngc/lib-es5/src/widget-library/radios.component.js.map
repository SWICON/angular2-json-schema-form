{"version":3,"sources":["../../../lib/src/widget-library/radios.component.ts"],"names":[],"mappings":"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","file":"radios.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\nimport { JsonSchemaFormService } from '../json-schema-form.service';\r\nimport { buildTitleMap } from '../shared/index';\nexport class RadiosComponent implements OnInit {\r\n  formControl: AbstractControl;\r\n  controlName: string;\r\n  controlValue: any;\r\n  controlDisabled: boolean = false;\r\n  boundControl: boolean = false;\r\n  options: any;\r\n  layoutOrientation: string = 'vertical';\r\n  radiosList: any[] = [];\r\n   formID: number;\r\n   layoutNode: any;\r\n   layoutIndex: number[];\r\n   dataIndex: number[];\n/**\n * @param {?} jsf\n */\nconstructor(\nprivate jsf: JsonSchemaFormService\r\n  ) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this.options = this.layoutNode.options || {};\r\n    if (this.layoutNode.type === 'radios-inline' ||\r\n      this.layoutNode.type === 'radiobuttons'\r\n    ) {\r\n      this.layoutOrientation = 'horizontal';\r\n    }\r\n    this.radiosList = buildTitleMap(\r\n      this.options.titleMap || this.options.enumNames,\r\n      this.options.enum, true\r\n    );\r\n    this.jsf.initializeControl(this);\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nupdateValue(event) {\r\n    this.jsf.updateValue(this, event.target.value);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'radios-widget',\r\n  template: `\r\n    <label *ngIf=\"options?.title\"\r\n      [attr.for]=\"'control' + layoutNode?._id\"\r\n      [class]=\"options?.labelHtmlClass\"\r\n      [style.display]=\"options?.notitle ? 'none' : ''\"\r\n      [innerHTML]=\"options?.title\"></label>\r\n      <div [ngSwitch]=\"layoutOrientation\">\r\n\r\n        <!-- 'horizontal' = radios-inline or radiobuttons -->\r\n        <div *ngSwitchCase=\"'horizontal'\"\r\n          [class]=\"options?.htmlClass\">\r\n          <label *ngFor=\"let radioItem of radiosList\"\r\n            [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\r\n            [class]=\"options?.itemLabelHtmlClass +\r\n              ((controlValue + '' === radioItem?.value + '') ?\r\n              (' ' + options?.activeClass + ' ' + options?.style?.selected) :\r\n              (' ' + options?.style?.unselected))\">\r\n            <input type=\"radio\"\r\n              [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\r\n              [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\r\n              [attr.required]=\"options?.required\"\r\n              [checked]=\"radioItem?.value === controlValue\"\r\n              [class]=\"options?.fieldHtmlClass\"\r\n              [disabled]=\"controlDisabled\"\r\n              [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\r\n              [name]=\"controlName\"\r\n              [value]=\"radioItem?.value\"\r\n              (change)=\"updateValue($event)\">\r\n            <span [innerHTML]=\"radioItem?.name\"></span>\r\n          </label>\r\n        </div>\r\n\r\n        <!-- 'vertical' = regular radios -->\r\n        <div *ngSwitchDefault>\r\n          <div *ngFor=\"let radioItem of radiosList\"\r\n            [class]=\"options?.htmlClass\">\r\n            <label\r\n              [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\r\n              [class]=\"options?.itemLabelHtmlClass +\r\n                ((controlValue + '' === radioItem?.value + '') ?\r\n                (' ' + options?.activeClass + ' ' + options?.style?.selected) :\r\n                (' ' + options?.style?.unselected))\">\r\n              <input type=\"radio\"\r\n                [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\r\n                [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\r\n                [attr.required]=\"options?.required\"\r\n                [checked]=\"radioItem?.value === controlValue\"\r\n                [class]=\"options?.fieldHtmlClass\"\r\n                [disabled]=\"controlDisabled\"\r\n                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\r\n                [name]=\"controlName\"\r\n                [value]=\"radioItem?.value\"\r\n                (change)=\"updateValue($event)\">\r\n              <span [innerHTML]=\"radioItem?.name\"></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n      </div>`,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonSchemaFormService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formID': [{ type: Input },],\n'layoutNode': [{ type: Input },],\n'layoutIndex': [{ type: Input },],\n'dataIndex': [{ type: Input },],\n};\n}\n\nfunction RadiosComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRadiosComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadiosComponent.ctorParameters;\n/** @type {?} */\nRadiosComponent.propDecorators;\n/** @type {?} */\nRadiosComponent.prototype.formControl;\n/** @type {?} */\nRadiosComponent.prototype.controlName;\n/** @type {?} */\nRadiosComponent.prototype.controlValue;\n/** @type {?} */\nRadiosComponent.prototype.controlDisabled;\n/** @type {?} */\nRadiosComponent.prototype.boundControl;\n/** @type {?} */\nRadiosComponent.prototype.options;\n/** @type {?} */\nRadiosComponent.prototype.layoutOrientation;\n/** @type {?} */\nRadiosComponent.prototype.radiosList;\n/** @type {?} */\nRadiosComponent.prototype.formID;\n/** @type {?} */\nRadiosComponent.prototype.layoutNode;\n/** @type {?} */\nRadiosComponent.prototype.layoutIndex;\n/** @type {?} */\nRadiosComponent.prototype.dataIndex;\n/** @type {?} */\nRadiosComponent.prototype.jsf;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}