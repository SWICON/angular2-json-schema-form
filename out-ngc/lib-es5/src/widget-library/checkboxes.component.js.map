{"version":3,"sources":["../../../lib/src/widget-library/checkboxes.component.ts"],"names":[],"mappings":"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","file":"checkboxes.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormArray, AbstractControl } from '@angular/forms';\r\n\r\nimport { JsonSchemaFormService, CheckboxItem } from '../json-schema-form.service';\r\nimport { buildFormGroup, buildTitleMap, JsonPointer } from '../shared/index';\nexport class CheckboxesComponent implements OnInit {\r\n  formControl: AbstractControl;\r\n  controlName: string;\r\n  controlValue: any;\r\n  boundControl: boolean = false;\r\n  options: any;\r\n  layoutOrientation: string;\r\n  formArray: AbstractControl;\r\n  checkboxList: CheckboxItem[] = [];\r\n   formID: number;\r\n   layoutNode: any;\r\n   layoutIndex: number[];\r\n   dataIndex: number[];\n/**\n * @param {?} jsf\n */\nconstructor(\nprivate jsf: JsonSchemaFormService\r\n  ) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this.options = this.layoutNode.options || {};\r\n    this.layoutOrientation = (this.layoutNode.type === 'checkboxes-inline' ||\r\n      this.layoutNode.type === 'checkboxbuttons') ? 'horizontal' : 'vertical';\r\n    this.jsf.initializeControl(this);\r\n    this.checkboxList = buildTitleMap(\r\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\r\n    );\r\n    if (this.boundControl) {\r\n      const /** @type {?} */ formArray = this.jsf.getControl(this);\r\n      for (let /** @type {?} */ checkboxItem of this.checkboxList) {\r\n        checkboxItem.checked = formArray.value.indexOf(checkboxItem.value) !== -1;\r\n      }\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nupdateValue(event) {\r\n    for (let /** @type {?} */ checkboxItem of this.checkboxList) {\r\n      if (event.target.value === checkboxItem.value) {\r\n        checkboxItem.checked = event.target.checked;\r\n      }\r\n    }\r\n    if (this.boundControl) {\r\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'checkboxes-widget',\r\n  template: `\r\n    <label *ngIf=\"options?.title\"\r\n      [class]=\"options?.labelHtmlClass\"\r\n      [style.display]=\"options?.notitle ? 'none' : ''\"\r\n      [innerHTML]=\"options?.title\"></label>\r\n\r\n    <!-- 'horizontal' = checkboxes-inline or checkboxbuttons -->\r\n    <div *ngIf=\"layoutOrientation === 'horizontal'\" [class]=\"options?.htmlClass\">\r\n      <label *ngFor=\"let checkboxItem of checkboxList\"\r\n        [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\r\n        [class]=\"options?.itemLabelHtmlClass + (checkboxItem.checked ?\r\n          (' ' + options?.activeClass + ' ' + options?.style?.selected) :\r\n          (' ' + options?.style?.unselected))\">\r\n        <input type=\"checkbox\"\r\n          [attr.required]=\"options?.required\"\r\n          [checked]=\"checkboxItem.checked\"\r\n          [class]=\"options?.fieldHtmlClass\"\r\n          [disabled]=\"controlDisabled\"\r\n          [id]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\r\n          [name]=\"formControlName\"\r\n          [readonly]=\"options?.readonly ? 'readonly' : null\"\r\n          [value]=\"checkboxItem.value\"\r\n          (change)=\"updateValue($event)\">\r\n        <span [innerHTML]=\"checkboxItem.name\"></span>\r\n      </label>\r\n    </div>\r\n\r\n    <!-- 'vertical' = regular checkboxes -->\r\n    <div *ngIf=\"layoutOrientation === 'vertical'\">\r\n      <div *ngFor=\"let checkboxItem of checkboxList\" [class]=\"options?.htmlClass\">\r\n        <label\r\n          [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\r\n          [class]=\"options?.itemLabelHtmlClass + (checkboxItem.checked ?\r\n            (' ' + options?.activeClass + ' ' + options?.style?.selected) :\r\n            (' ' + options?.style?.unselected))\">\r\n          <input type=\"checkbox\"\r\n            [attr.required]=\"options?.required\"\r\n            [checked]=\"checkboxItem.checked\"\r\n            [class]=\"options?.fieldHtmlClass\"\r\n            [disabled]=\"controlDisabled\"\r\n            [id]=\"options?.name + '/' + checkboxItem.value\"\r\n            [name]=\"options?.name\"\r\n            [readonly]=\"options?.readonly ? 'readonly' : null\"\r\n            [value]=\"checkboxItem.value\"\r\n            (change)=\"updateValue($event)\">\r\n          <span [innerHTML]=\"checkboxItem?.name\"></span>\r\n        </label>\r\n      </div>\r\n    </div>`,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonSchemaFormService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formID': [{ type: Input },],\n'layoutNode': [{ type: Input },],\n'layoutIndex': [{ type: Input },],\n'dataIndex': [{ type: Input },],\n};\n}\n\nfunction CheckboxesComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxesComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxesComponent.ctorParameters;\n/** @type {?} */\nCheckboxesComponent.propDecorators;\n/** @type {?} */\nCheckboxesComponent.prototype.formControl;\n/** @type {?} */\nCheckboxesComponent.prototype.controlName;\n/** @type {?} */\nCheckboxesComponent.prototype.controlValue;\n/** @type {?} */\nCheckboxesComponent.prototype.boundControl;\n/** @type {?} */\nCheckboxesComponent.prototype.options;\n/** @type {?} */\nCheckboxesComponent.prototype.layoutOrientation;\n/** @type {?} */\nCheckboxesComponent.prototype.formArray;\n/** @type {?} */\nCheckboxesComponent.prototype.checkboxList;\n/** @type {?} */\nCheckboxesComponent.prototype.formID;\n/** @type {?} */\nCheckboxesComponent.prototype.layoutNode;\n/** @type {?} */\nCheckboxesComponent.prototype.layoutIndex;\n/** @type {?} */\nCheckboxesComponent.prototype.dataIndex;\n/** @type {?} */\nCheckboxesComponent.prototype.jsf;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}