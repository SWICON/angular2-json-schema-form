{"version":3,"sources":["../../../lib/src/shared/layout.functions.ts"],"names":[],"mappings":"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","file":"layout.functions.js","sourceRoot":"","sourcesContent":["import * as _ from 'lodash/index';\r\n\r\nimport {\r\n  inArray, isArray, isEmpty, isNumber, isObject, isDefined, isString\r\n} from './validator.functions';\r\n\r\nimport { copy, forEach, hasOwn, toTitleCase } from './utility.functions';\r\n\r\nimport { Pointer, JsonPointer } from './jsonpointer.functions';\r\n\r\nimport {\r\n  getFromSchema, getInputType, checkInlineType, isInputRequired, updateInputOptions\r\n} from './json-schema.functions';\r\n\r\nimport { buildFormGroupTemplate, getControl } from './form-group.functions';\n/**\n * 'buildLayout' function\r\r\\@param {any} jsf\r\\@return {any[]}\n * @param {?} jsf\n * @param {?} widgetLibrary\n * @return {?}\n */\nexport function buildLayout(jsf: any, widgetLibrary: any): any[] {\r\n  let /** @type {?} */ hasSubmitButton = !JsonPointer.get(jsf, '/globalOptions/addSubmit');\r\n  let /** @type {?} */ formLayout = mapLayout(jsf.layout, (layoutItem, index, layoutPointer) => {\r\n    let /** @type {?} */ currentIndex: number = index;\r\n    let /** @type {?} */ newNode: any = {};\r\n    if (isObject(layoutItem)) {\r\n      newNode = layoutItem;\r\n    } else if (JsonPointer.isJsonPointer(layoutItem)) {\r\n      newNode.dataPointer = layoutItem;\r\n    } else if (isString(layoutItem)) {\r\n      newNode.key = layoutItem;\r\n    } else {\r\n      console.error('buildLayout error: Form layout element not recognized:');\r\n      console.error(layoutItem);\r\n      return null;\r\n    }\r\n    Object.assign(newNode, {\r\n      _id: _.uniqueId(),\r\n      layoutPointer: layoutPointer.replace(/\\/\\d+/g, '/-'),\r\n      options: {},\r\n    });\r\n    let /** @type {?} */ itemSchema: any = null;\r\n\r\n    // If newNode does not have a dataPointer, try to find an equivalent\r\n    if (!hasOwn(newNode, 'dataPointer')) {\r\n\r\n      // If newNode has a key, change it to a dataPointer\r\n      if (hasOwn(newNode, 'key')) {\r\n        if (newNode.key === '*') {\r\n          newNode.dataPointer = newNode.key;\r\n        } else if (JsonPointer.isJsonPointer(newNode.key)) {\r\n          newNode.dataPointer = JsonPointer.compile(newNode.key);\r\n        } else {\r\n          newNode.dataPointer =\r\n            JsonPointer.compile(JsonPointer.parseObjectPath(newNode.key), '-');\r\n        }\r\n        delete newNode.key;\r\n\r\n      // If newNode is an array, search for dataPointer in child nodes\r\n      } else if (hasOwn(newNode, 'type') && newNode.type.slice(-5) === 'array') {\r\n        const /** @type {?} */ findDataPointer = (items) => {\r\n          if (items === null || typeof items !== 'object') { return; }\r\n          if (hasOwn(items, 'dataPointer')) { return items.dataPointer; }\r\n          if (isArray(items.items)) {\r\n            for (let /** @type {?} */ item of items.items) {\r\n              if (hasOwn(item, 'dataPointer') &&\r\n                item.dataPointer.indexOf('/-') !== -1\r\n              ) {\r\n                return item.dataPointer;\r\n              }\r\n              if (hasOwn(item, 'items')) {\r\n                const /** @type {?} */ searchItem = findDataPointer(item);\r\n                if (searchItem) { return searchItem; }\r\n              }\r\n            }\r\n          }\r\n        };\r\n        const /** @type {?} */ childDataPointer = findDataPointer(newNode);\r\n        if (childDataPointer) {\r\n          newNode.dataPointer =\r\n            childDataPointer.slice(0, childDataPointer.lastIndexOf('/-'));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (hasOwn(newNode, 'dataPointer')) {\r\n      if (newNode.dataPointer === '*') {\r\n        return buildLayoutFromSchema(\r\n          jsf, widgetLibrary, newNode.layoutPointer.slice(0, -2)\r\n        );\r\n      }\r\n      newNode.dataPointer =\r\n        JsonPointer.toGenericPointer(newNode.dataPointer, jsf.arrayMap);\r\n      const /** @type {?} */ LastKey: string = JsonPointer.toKey(newNode.dataPointer);\r\n      if (isString(LastKey) && LastKey !== '-') {\r\n        newNode.name = LastKey;\r\n      }\r\n      if (!jsf.dataMap.has(newNode.dataPointer)) {\r\n        jsf.dataMap.set(newNode.dataPointer, new Map);\r\n      } else if (\r\n        jsf.dataMap.get(newNode.dataPointer).has('schemaPointer')\r\n      ) {\r\n        itemSchema = JsonPointer.get(\r\n          jsf.schema,\r\n          jsf.dataMap.get(newNode.dataPointer).get('schemaPointer')\r\n        );\r\n      } else {\r\n        itemSchema = getFromSchema(jsf.schema, newNode.dataPointer);\r\n      }\r\n      if (itemSchema) {\r\n        if (!hasOwn(newNode, 'type')) {\r\n          newNode.type = getInputType(itemSchema, newNode);\r\n        } else if (!widgetLibrary.hasWidget(newNode.type)) {\r\n          const /** @type {?} */ oldWidgetType = newNode.type;\r\n          newNode.type = getInputType(itemSchema, newNode);\r\n          console.error('error: widget type \"' + oldWidgetType +\r\n            '\" not found in library. Replacing with \"' + newNode.type + '\".');\r\n        } else {\r\n          newNode.type = checkInlineType(newNode.type, itemSchema, newNode);\r\n        }\r\n        newNode.dataType = itemSchema.type;\r\n        updateInputOptions(newNode, itemSchema, jsf);\r\n\r\n        // Present checkboxes as single control, rather than array\r\n        if (newNode.type === 'checkboxes' && hasOwn(itemSchema, 'items')) {\r\n          updateInputOptions(newNode, itemSchema.items, jsf);\r\n        } else if (itemSchema.type === 'array' && hasOwn(itemSchema, 'items')) {\r\n          if (isArray(itemSchema.items)) {\r\n            newNode.tupleItems = itemSchema.items.length;\r\n            if (hasOwn(itemSchema, 'additionalItems')) {\r\n              newNode.listItems = hasOwn(itemSchema, 'maxItems') ?\r\n                itemSchema.maxItems - itemSchema.items.length : true;\r\n            } else {\r\n              newNode.listItems = false;\r\n            }\r\n          } else {\r\n            newNode.tupleItems = false;\r\n            newNode.listItems = itemSchema.maxItems || true;\r\n          }\r\n        }\r\n        if (!newNode.options.title && newNode.options.legend) {\r\n          newNode.options.title = newNode.options.legend;\r\n        } else if (!newNode.options.title && !/^\\d+$/.test(newNode.name)) {\r\n          newNode.options.title = toTitleCase(newNode.name.replace(/_/g, ' '));\r\n        }\r\n        if (isInputRequired(jsf.schema, newNode.dataPointer)) {\r\n          newNode.options.required = true;\r\n          jsf.fieldsRequired = true;\r\n        }\r\n      } else {\r\n        // TODO: create item in FormGroup model from layout key (?)\r\n        updateInputOptions(newNode, {}, jsf);\r\n      }\r\n\r\n      if (hasOwn(newNode.options, 'copyValueTo')) {\r\n        if (typeof newNode.options.copyValueTo === 'string') {\r\n          newNode.options.copyValueTo = [newNode.options.copyValueTo];\r\n        }\r\n        if (isArray(newNode.options.copyValueTo)) {\r\n          newNode.options.copyValueTo = newNode.options.copyValueTo.map(item =>\r\n            JsonPointer.isJsonPointer(item) ?\r\n              JsonPointer.compile(item) :\r\n              JsonPointer.compile(JsonPointer.parseObjectPath(item), '-')\r\n          );\r\n        }\r\n      }\r\n\r\n      newNode.widget = widgetLibrary.getWidget(newNode.type);\r\n      jsf.dataMap.get(newNode.dataPointer).set('inputType', newNode.type);\r\n      jsf.dataMap.get(newNode.dataPointer).set('widget', newNode.widget);\r\n\r\n      if (newNode.dataType === 'array' && hasOwn(newNode, 'items')) {\r\n        if (newNode.options.required && !newNode.minItems) { newNode.minItems = 1; }\r\n        let /** @type {?} */ arrayPointer: string = newNode.dataPointer + '/-';\r\n        if (!jsf.dataMap.has(arrayPointer)) {\r\n          jsf.dataMap.set(arrayPointer, new Map);\r\n        }\r\n        jsf.dataMap.get(arrayPointer).set('inputType', 'section');\r\n\r\n        // Fix insufficiently nested array item groups\r\n        if (newNode.items.length > 1) {\r\n          let /** @type {?} */ arrayItemGroup = [];\r\n          let /** @type {?} */ arrayItemGroupTemplate = [];\r\n          let /** @type {?} */ newIndex = 0;\r\n          for (let /** @type {?} */ i = newNode.items.length - 1, /** @type {?} */ l = 0; i >= l; i--) {\r\n            let /** @type {?} */ subItem = newNode.items[i];\r\n            if (hasOwn(subItem, 'dataPointer') &&\r\n              subItem.dataPointer.slice(0, arrayPointer.length) === arrayPointer\r\n            ) {\r\n              let /** @type {?} */ arrayItem = newNode.items.splice(i, 1)[0];\r\n              let /** @type {?} */ arrayItemTemplate = mapLayout([arrayItem], templateItem => {\r\n                templateItem.layoutPointer = templateItem.layoutPointer\r\n                  .replace(newNode.layoutPointer, newNode.layoutPointer + '/items/-');\r\n                return templateItem;\r\n              })[0];\r\n              arrayItemGroupTemplate.unshift(arrayItemTemplate);\r\n              arrayItem.dataPointer = newNode.dataPointer + '/-' +\r\n                arrayItem.dataPointer.slice(arrayPointer.length);\r\n              arrayItem.layoutPointer = newNode.layoutPointer + '/items/-/items/-';\r\n              arrayItemGroup.unshift(arrayItem);\r\n              newIndex++;\r\n            } else {\r\n              subItem.arrayItem = true;\r\n              // TODO: Check schema to get arrayItemType and removable\r\n              subItem.arrayItemType = 'list';\r\n              subItem.removable = newNode.options.removable || !newNode.options.minItems;\r\n            }\r\n          }\r\n          if (arrayItemGroup.length) {\r\n            newNode.items.push({\r\n              arrayItem: true,\r\n              items: arrayItemGroup,\r\n              layoutPointer: newNode.layoutPointer + '/items/-',\r\n              options: {\r\n                arrayItemType: newNode.tupleItems > newNode.items.length ?\r\n                  'tuple' : 'list',\r\n                removable: newNode.options.removable !== false &&\r\n                  (newNode.options.minItems || 0) <= newNode.items.length,\r\n              },\r\n              dataPointer: newNode.dataPointer + '/-',\r\n              type: 'section',\r\n              widget: widgetLibrary.getWidget('section'),\r\n            });\r\n          }\r\n        } else {\r\n          newNode.items[0].arrayItem = true;\r\n          if (!newNode.items[0].dataPointer) {\r\n            newNode.items[0].dataPointer =\r\n              JsonPointer.toGenericPointer(arrayPointer, jsf.arrayMap);\r\n          }\r\n          if (newNode.options.minItems) {\r\n            newNode.items[0].options.removable = false;\r\n          } else if (!JsonPointer.has(newNode, '/items/0/options/removable')) {\r\n            newNode.items[0].options.removable = true;\r\n          }\r\n          newNode.items[0].options.arrayItemType =\r\n            newNode.tupleItems ? 'tuple' : 'list';\r\n        }\r\n\r\n        // TODO: check maxItems to verify adding new items is OK, and check\r\n        // additionalItems for whether there is a different schema for new items\r\n        if (newNode.options.addable !== false) {\r\n          jsf.layoutRefLibrary[arrayPointer] =\r\n            _.cloneDeep(newNode.items[newNode.items.length - 1]);\r\n          const /** @type {?} */ initialNodeData =\r\n            JsonPointer.get(jsf.initialValues, newNode.dataPointer);\r\n          if (isArray(initialNodeData) &&\r\n            initialNodeData.length > newNode.items.length\r\n          ) {\r\n            for (let /** @type {?} */ i = newNode.items.length, /** @type {?} */ l = initialNodeData.length; i < l; i++) {\r\n              newNode.items\r\n                .push(_.cloneDeep(jsf.layoutRefLibrary[arrayPointer]));\r\n            }\r\n          }\r\n          let /** @type {?} */ buttonText: string = 'Add';\r\n          if (newNode.options.title) {\r\n            buttonText += ' ' + newNode.options.title;\r\n          } else if (newNode.name && !/^\\d+$/.test(newNode.name)) {\r\n            buttonText += ' ' + toTitleCase(newNode.name.replace(/_/g, ' '));\r\n\r\n          // If newNode doesn't have a title, look for title of parent array item\r\n          } else {\r\n            const /** @type {?} */ parentSchema =\r\n              getFromSchema(jsf.schema, newNode.dataPointer, true);\r\n            if (hasOwn(parentSchema, 'title')) {\r\n              buttonText += ' to ' + parentSchema.title;\r\n            }\r\n          }\r\n          const /** @type {?} */ dataPointer = JsonPointer.toGenericPointer(arrayPointer, jsf.arrayMap);\r\n          let /** @type {?} */ newNodeRef: any = {\r\n            arrayItem: true,\r\n            dataPointer: dataPointer,\r\n            layoutPointer: newNode.layoutPointer + '/items/-',\r\n            listItems: newNode.listItems,\r\n            options: {\r\n              arrayItemType: 'list',\r\n              removable: !!newNode.options.removable,\r\n              title: buttonText,\r\n            },\r\n            tupleItems: newNode.tupleItems,\r\n            type: '$ref',\r\n            widget: widgetLibrary.getWidget('$ref'),\r\n            $ref: dataPointer,\r\n          };\r\n          if (isDefined(newNode.options.maxItems)) {\r\n            newNodeRef.options.maxItems = newNode.options.maxItems;\r\n          }\r\n          if (isString(JsonPointer.get(newNode, '/style/add'))) {\r\n            newNodeRef.options.fieldStyle = newNode.style.add;\r\n            delete newNode.style.add;\r\n            if (isEmpty(newNode.style)) { delete newNode.style; }\r\n          }\r\n          newNode.items.push(newNodeRef);\r\n        }\r\n      } else {\r\n        newNode.arrayItem = false;\r\n      }\r\n    } else if (hasOwn(newNode, 'type') || hasOwn(newNode, 'items')) {\r\n      const /** @type {?} */ parentType: string =\r\n        JsonPointer.get(jsf.layout, layoutPointer, 0, -2).type;\r\n      if (!hasOwn(newNode, 'type')) {\r\n        newNode.type =\r\n          inArray(parentType, ['tabs', 'tabarray']) ? 'tab' : 'array';\r\n      }\r\n      newNode.arrayItem = parentType === 'array';\r\n      newNode.widget = widgetLibrary.getWidget(newNode.type);\r\n      updateInputOptions(newNode, {}, jsf);\r\n    }\r\n    if (newNode.type === 'submit') { hasSubmitButton = true; }\r\n    return newNode;\r\n  });\r\n  if (!hasSubmitButton) {\r\n    formLayout.push({\r\n      options: {\r\n        title: 'Submit',\r\n      },\r\n      type: 'submit',\r\n      widget: widgetLibrary.getWidget('submit'),\r\n    });\r\n  }\r\n  return formLayout;\r\n}\n/**\n * 'buildLayoutFromSchema' function\r\r\\@param {any} jsf -\r\\@param {number = 0} layoutIndex -\r\\@param {string = ''} layoutPointer -\r\\@param {string = ''} schemaPointer -\r\\@param {string = ''} dataPointer -\r\\@param {boolean = false} arrayItem -\r\\@param {string = null} arrayItemType -\r\\@param {boolean = null} removable -\r\\@param {boolean = false} forRefLibrary -\r\\@return {any}\n * @param {?} jsf\n * @param {?} widgetLibrary\n * @param {?=} layoutPointer\n * @param {?=} schemaPointer\n * @param {?=} dataPointer\n * @param {?=} arrayItem\n * @param {?=} arrayItemType\n * @param {?=} removable\n * @param {?=} forRefLibrary\n * @return {?}\n */\nexport function buildLayoutFromSchema(\r\n  jsf: any, widgetLibrary: any, layoutPointer: string = '',\r\n  schemaPointer: string = '', dataPointer: string = '',\r\n  arrayItem: boolean = false, arrayItemType: string = null,\r\n  removable: boolean = null, forRefLibrary: boolean = false\r\n): any {\r\n  const /** @type {?} */ schema = JsonPointer.get(jsf.schema, schemaPointer);\r\n  if (!hasOwn(schema, 'type') && !hasOwn(schema, 'x-schema-form') &&\r\n    !hasOwn(schema, '$ref')) { return null; }\r\n  const /** @type {?} */ newNodeType: string = getInputType(schema);\r\n  let /** @type {?} */ newNode: any = {\r\n    _id: _.uniqueId(),\r\n    arrayItem: arrayItem,\r\n    dataPointer: JsonPointer.toGenericPointer(dataPointer, jsf.arrayMap),\r\n    dataType: schema.type || (hasOwn(schema, '$ref') ? '$ref' : null),\r\n    layoutPointer: layoutPointer.replace(/\\/\\d+/g, '/-') || '/-',\r\n    options: {},\r\n    type: newNodeType,\r\n    widget: widgetLibrary.getWidget(newNodeType),\r\n  };\r\n  const /** @type {?} */ lastDataKey = JsonPointer.toKey(newNode.dataPointer);\r\n  if (lastDataKey !== '-') { newNode.name = lastDataKey; }\r\n  if (newNode.arrayItem) {\r\n    newNode.options.arrayItemType = arrayItemType;\r\n    newNode.options.removable = removable;\r\n  }\r\n  if (dataPointer !== '') {\r\n    if (!jsf.dataMap.has(newNode.dataPointer)) {\r\n      jsf.dataMap.set(newNode.dataPointer, new Map);\r\n    }\r\n    jsf.dataMap.get(newNode.dataPointer).set('schemaPointer', schemaPointer);\r\n    jsf.dataMap.get(newNode.dataPointer).set('inputType', newNode.type);\r\n    jsf.dataMap.get(newNode.dataPointer).set('widget', newNode.widget);\r\n  }\r\n  updateInputOptions(newNode, schema, jsf);\r\n  if (!newNode.options.title && newNode.options.legend) {\r\n    newNode.options.title = newNode.options.legend;\r\n  } else if (!newNode.options.title && newNode.name && !/^\\d+$/.test(newNode.name)) {\r\n    newNode.options.title = toTitleCase(newNode.name.replace(/_/g, ' '));\r\n  }\r\n  if (newNode.dataType === 'object') {\r\n    let /** @type {?} */ newSection: any[] = [];\r\n    let /** @type {?} */ propertyKeys: string[] = [];\r\n    if (isObject(schema.properties)) {\r\n      propertyKeys = schema['ui:order'] ||\r\n        schema.properties['ui:order'] ||\r\n        Object.keys(schema['properties']);\r\n    } else if (hasOwn(schema, 'additionalProperties')) {\r\n      return null;\r\n      // TODO: Figure out what to do with additionalProperties\r\n      // ... possibly provide a way to enter both key names and values?\r\n    }\r\n    for (let /** @type {?} */ key of propertyKeys) {\r\n      if (hasOwn(schema.properties, key)) {\r\n        let /** @type {?} */ newLayoutPointer: string;\r\n        if (newNode.layoutPointer === '' && !forRefLibrary) {\r\n          newLayoutPointer = '/-';\r\n        } else {\r\n          newLayoutPointer = newNode.layoutPointer + '/items/-';\r\n        }\r\n        let /** @type {?} */ innerItem = buildLayoutFromSchema(\r\n          jsf, widgetLibrary,\r\n          newLayoutPointer,\r\n          schemaPointer + '/properties/' + key,\r\n          dataPointer + '/' + key,\r\n          false, null, null, forRefLibrary\r\n        );\r\n        if (innerItem) {\r\n          if (isInputRequired(schema, '/' + key)) {\r\n            innerItem.options.required = true;\r\n            jsf.fieldsRequired = true;\r\n          }\r\n          newSection.push(innerItem);\r\n        }\r\n      }\r\n    }\r\n    // if (dataPointer === '' && !forRefLibrary) {\r\n    //   newNode = newSection;\r\n    // } else {\r\n      newNode.items = newSection;\r\n    // }\r\n  } else if (newNode.dataType === 'array') {\r\n    newNode.items = [];\r\n    let /** @type {?} */ templateArray: any[] = [];\r\n    if (!forRefLibrary) {\r\n      const /** @type {?} */ templateControl: any =\r\n        getControl(jsf.formGroupTemplate, dataPointer);\r\n      if (hasOwn(templateControl, 'controls')) {\r\n        templateArray = templateControl['controls'];\r\n      }\r\n    }\r\n    if (!newNode.minItems && isInputRequired(jsf.schema, schemaPointer)) {\r\n      newNode.minItems = 1;\r\n    }\r\n    const /** @type {?} */ minItems: number = newNode.minItems || 0;\r\n    const /** @type {?} */ maxItems: number = newNode.maxItems || 1000000;\r\n    if (isDefined(newNode.options.removable)) {\r\n      removable = newNode.options.removable;\r\n    } else if (!isDefined(removable)) {\r\n      removable = true;\r\n    }\r\n    let /** @type {?} */ additionalItems: any = null;\r\n    if (isArray(schema.items)) { // 'items' is an array = tuple items\r\n      newNode.tupleItems = schema.items.length;\r\n      if (hasOwn(schema, 'additionalItems')) {\r\n        newNode.listItems = hasOwn(schema, 'maxItems') ?\r\n          schema.maxItems - schema.items.length : true;\r\n      } else {\r\n        newNode.listItems = false;\r\n      }\r\n      newNode.items = _.filter(_.map(schema.items, (item: any, i) => {\r\n        return buildLayoutFromSchema(\r\n          jsf, widgetLibrary,\r\n          newNode.layoutPointer + '/items/-',\r\n          schemaPointer + '/items/' + i,\r\n          dataPointer + '/' + i,\r\n          true, 'tuple', removable && i >= minItems, forRefLibrary\r\n        );\r\n      }));\r\n      if (newNode.items.length < maxItems &&\r\n        hasOwn(schema, 'additionalItems') && isObject(schema.additionalItems)\r\n      ) { // 'additionalItems' is an object = additional list items (after tuple items)\r\n        if (newNode.items.length < templateArray.length) {\r\n          for (let /** @type {?} */ i = newNode.items.length, /** @type {?} */ l = templateArray.length; i < l; i++) {\r\n            newNode.items.push(buildLayoutFromSchema(\r\n              jsf, widgetLibrary,\r\n              newNode.layoutPointer + '/items/-',\r\n              schemaPointer + '/additionalItems',\r\n              dataPointer + '/' + i,\r\n              true, 'list', removable && i >= minItems, forRefLibrary\r\n            ));\r\n          }\r\n        } else if (newNode.items.length > templateArray.length) {\r\n          for (let /** @type {?} */ i = templateArray.length, /** @type {?} */ l = newNode.items.length; i < l; i++) {\r\n            templateArray.push(buildFormGroupTemplate(\r\n              jsf, null, false,\r\n              schemaPointer + '/additionalItems',\r\n              dataPointer + '/' + i,\r\n              JsonPointer.toControlPointer(jsf.formGroupTemplate, dataPointer + '/' + i)\r\n            ));\r\n          }\r\n        }\r\n        if (newNode.items.length < maxItems && newNode.options.addable !== false &&\r\n          JsonPointer.get(newNode.items[newNode.items.length - 1], '/type') !== '$ref'\r\n        ) {\r\n          additionalItems = buildLayoutFromSchema(\r\n            jsf, widgetLibrary,\r\n            newNode.layoutPointer + '/items/-',\r\n            schemaPointer + '/additionalItems',\r\n            dataPointer + '/-',\r\n            true, 'list', removable, forRefLibrary\r\n          );\r\n        }\r\n      }\r\n    } else { // 'items' is an object = list items only (no tuple items)\r\n      newNode.tupleItems = false;\r\n      newNode.listItems = schema.maxItems || true;\r\n      for (let /** @type {?} */ i = 0, /** @type {?} */ l = Math.max(templateArray.length, minItems, 1); i < l; i++) {\r\n        newNode.items.push(buildLayoutFromSchema(\r\n          jsf, widgetLibrary,\r\n          newNode.layoutPointer + '/items/-',\r\n          schemaPointer + '/items',\r\n          dataPointer + '/' + i,\r\n          true, 'list', removable && i >= minItems, forRefLibrary\r\n        ));\r\n      }\r\n      if (newNode.items.length < maxItems && newNode.options.addable !== false &&\r\n        JsonPointer.get(newNode.items[newNode.items.length - 1], '/type') !== '$ref'\r\n      ) {\r\n        additionalItems = buildLayoutFromSchema(\r\n          jsf, widgetLibrary,\r\n          newNode.layoutPointer + '/items/-',\r\n          schemaPointer + '/items',\r\n          dataPointer + '/-',\r\n          true, 'list', removable, forRefLibrary\r\n        );\r\n      }\r\n    }\r\n\r\n    // If addable items, save to layoutRefLibrary, and add $ref item to layout\r\n    if (additionalItems) {\r\n      jsf.layoutRefLibrary[dataPointer + '/-'] = additionalItems;\r\n      delete jsf.layoutRefLibrary[dataPointer + '/-']['key'];\r\n      delete jsf.layoutRefLibrary[dataPointer + '/-']['name'];\r\n      let /** @type {?} */ buttonText: string = 'Add ';\r\n      if (additionalItems.options.title) {\r\n        buttonText += additionalItems.options.title;\r\n      } else if (schema.title) {\r\n        buttonText += 'to ' + schema.title;\r\n      } else {\r\n        buttonText += 'to ' +\r\n          toTitleCase(JsonPointer.toKey(dataPointer).replace(/_/g, ' '));\r\n      }\r\n      let /** @type {?} */ newNodeRef: any = {\r\n        arrayItem: true,\r\n        dataPointer: dataPointer + '/-',\r\n        layoutPointer: newNode.layoutPointer + '/items/-',\r\n        listItems: newNode.listItems,\r\n        options: {\r\n          arrayItemType: 'list',\r\n          removable: false,\r\n          title: buttonText,\r\n        },\r\n        tupleItems: newNode.tupleItems,\r\n        type: '$ref',\r\n        widget: widgetLibrary.getWidget('$ref'),\r\n        $ref: dataPointer + '/-',\r\n      };\r\n      if (isDefined(newNode.options.maxItems)) {\r\n        newNodeRef.options.maxItems = newNode.options.maxItems;\r\n      }\r\n      newNode.items.push(newNodeRef);\r\n    } else if (\r\n      JsonPointer.get(newNode.items[newNode.items.length - 1], '/type') === '$ref'\r\n    ) {\r\n      Object.assign(newNode.items[newNode.items.length - 1], {\r\n        listItems: newNode.listItems,\r\n        tupleItems: newNode.tupleItems,\r\n      });\r\n      if (\r\n        isNumber(JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems)\r\n      ) {\r\n        newNode.items[newNode.items.length - 1].options.maxItems =\r\n          JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems;\r\n      }\r\n    }\r\n  } else if (newNode.dataType === '$ref') {\r\n    const /** @type {?} */ schemaRef: string = JsonPointer.compile(schema.$ref);\r\n    let /** @type {?} */ buttonText: string = 'Add';\r\n    if (newNode.options.title) {\r\n      buttonText += ' ' + newNode.options.title;\r\n    } else if (newNode.name && !/^\\d+$/.test(newNode.name)) {\r\n      buttonText += ' ' + toTitleCase(newNode.name.replace(/_/g, ' '));\r\n\r\n    // If newNode doesn't have a title, look for title of parent array item\r\n    } else if (\r\n      hasOwn(JsonPointer.get(jsf.schema, schemaPointer, 0, -1), 'title')\r\n    ) {\r\n      buttonText += ' to ' +\r\n        JsonPointer.get(jsf.schema, schemaPointer, 0, -1).title;\r\n    }\r\n    Object.assign(newNode, {\r\n      recursiveReference: true,\r\n      widget: widgetLibrary.getWidget('$ref'),\r\n      $ref: schemaRef,\r\n    });\r\n    Object.assign(newNode.options, {\r\n      removable: false,\r\n      title: buttonText,\r\n    });\r\n    if (isNumber(JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems)) {\r\n      newNode.options.maxItems =\r\n        JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems;\r\n    }\r\n\r\n    // Build dataRecursiveRefMap\r\n    let /** @type {?} */ genericDataPointer =\r\n      JsonPointer.toGenericPointer(newNode.dataPointer, jsf.arrayMap);\r\n    // TODO: Replace the following by checking to see if the parent element is\r\n    // an array, and only removing the index if allowed\r\n    genericDataPointer = genericDataPointer.replace(/\\/\\d+$/, '/-');\r\n    if (!forRefLibrary) {\r\n\r\n      // Is schema $ref a subset of dataPointer?\r\n      // If yes, map dataPointer and schema $ref as a recursive reference\r\n      if (JsonPointer.isSubPointer(schemaRef, genericDataPointer)) {\r\n        jsf.dataRecursiveRefMap.set(genericDataPointer, schemaRef);\r\n\r\n      // If no, add a partial reference now, so a full reference can be added later\r\n      } else {\r\n        jsf.dataRecursiveRefMap.set(schemaRef, genericDataPointer);\r\n      }\r\n\r\n    // If partial reference already exists,\r\n    // use current and previous dataPointers to create a full reference\r\n    } else if (jsf.dataRecursiveRefMap.has(schemaRef) &&\r\n      !jsf.dataRecursiveRefMap.has(jsf.dataRecursiveRefMap.get(schemaRef))\r\n    ) {\r\n      if (genericDataPointer ===\r\n        jsf.dataRecursiveRefMap.get(schemaRef).slice(-genericDataPointer.length)\r\n      ) {\r\n        jsf.dataRecursiveRefMap.set(\r\n          jsf.dataRecursiveRefMap.get(schemaRef),\r\n          jsf.dataRecursiveRefMap.get(schemaRef).slice(0, -genericDataPointer.length)\r\n        );\r\n      } else {\r\n        jsf.dataRecursiveRefMap.set(\r\n          jsf.dataRecursiveRefMap.get(schemaRef) + genericDataPointer,\r\n          jsf.dataRecursiveRefMap.get(schemaRef)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Add layout template to layoutRefLibrary\r\n    if (!hasOwn(jsf.layoutRefLibrary, schemaRef)) {\r\n      // Set to null first to prevent recursive reference from causing endless loop\r\n      jsf.layoutRefLibrary[schemaRef] = null;\r\n      const /** @type {?} */ newLayout: any = buildLayoutFromSchema(\r\n        jsf, widgetLibrary, '', schemaRef, '',\r\n        newNode.arrayItem, newNode.arrayItemType, true, true\r\n      );\r\n      if (newLayout) {\r\n        jsf.layoutRefLibrary[schemaRef] = newLayout;\r\n      } else {\r\n        delete jsf.layoutRefLibrary[schemaRef];\r\n      }\r\n    }\r\n  }\r\n  return newNode;\r\n}\n/**\n * 'mapLayout' function\r\rCreates a new layout by running each element in an existing layout through\ran iteratee. Recursively maps within array elements 'items' and 'tabs'.\rThe iteratee is invoked with four arguments: (value, index, layout, path)\r\rTHe returned layout may be longer (or shorter) then the source layout.\r\rIf an item from the source layout returns multiple items (as '*' usually will),\rthis function will keep all returned items in-line with the surrounding items.\r\rIf an item from the source layout causes an error and returns null, it is\rsimply skipped, and the function will still return all non-null items.\r\r\\@param {any[]} layout - the layout to map\r\\@param {(v: any, i?: number, l?: any, p?: string) => any}\r  function - the funciton to invoke on each element\r\\@param {any = ''} layoutPointer - the layoutPointer to layout, inside rootLayout\r\\@param {any[] = layout} rootLayout - the root layout, which conatins layout\r\\@return {[type]}\n * @param {?} layout\n * @param {?} fn\n * @param {?=} layoutPointer\n * @param {?=} rootLayout\n * @return {?}\n */\nexport function mapLayout(\r\n  layout: any[],\r\n  fn: (v: any, i?: number, p?: string, l?: any) => any,\r\n  layoutPointer: string = '',\r\n  rootLayout: any[] = layout\r\n): any[] {\r\n  let /** @type {?} */ indexPad: number = 0;\r\n  let /** @type {?} */ newLayout: any[] = [];\r\n  forEach(layout, (item, index) => {\r\n    let /** @type {?} */ realIndex = +index + indexPad;\r\n    let /** @type {?} */ newLayoutPointer = layoutPointer + '/' + realIndex;\r\n    let /** @type {?} */ newNode: any = copy(item);\r\n    let /** @type {?} */ itemsArray: any[] = [];\r\n    if (isObject(item)) {\r\n      if (hasOwn(item, 'tabs')) {\r\n        item.items = item.tabs;\r\n        delete item.tabs;\r\n      }\r\n      if (hasOwn(item, 'items')) {\r\n        itemsArray = isArray(item.items) ? item.items : [item.items];\r\n      }\r\n    }\r\n    if (itemsArray.length) {\r\n      newNode.items = mapLayout(itemsArray, fn, newLayoutPointer + '/items', rootLayout);\r\n    }\r\n    newNode = fn(newNode, realIndex, newLayoutPointer, rootLayout);\r\n    if (!isDefined(newNode)) {\r\n      indexPad--;\r\n    } else {\r\n      if (isArray(newNode)) { indexPad += newNode.length - 1; }\r\n      newLayout = newLayout.concat(newNode);\r\n    }\r\n  });\r\n  return newLayout;\r\n};\n/**\n * 'buildTitleMap' function\r\r\\@param {any} titleMap -\r\\@param {any} enumList -\r\\@param {boolean = false} fieldRequired -\r\\@return {{name: string, value: any}[]}\n * @param {?} titleMap\n * @param {?} enumList\n * @param {?=} fieldRequired\n * @return {?}\n */\nexport function buildTitleMap(\r\n  titleMap: any, enumList: any, fieldRequired: boolean = true\r\n): { name: string, value: any }[] {\r\n  let /** @type {?} */ newTitleMap: { name: string, value: any }[] = [];\r\n  let /** @type {?} */ hasEmptyValue: boolean = false;\r\n  if (titleMap) {\r\n    if (isArray(titleMap)) {\r\n      if (enumList) {\r\n        for (let /** @type {?} */ i of Object.keys(titleMap)) {\r\n          if (isObject(titleMap[i])) { // JSON Form / Angular Schema Form style\r\n            const /** @type {?} */ value: any = titleMap[i].value;\r\n            if (enumList.indexOf(value) !== -1) {\r\n              const /** @type {?} */ name: string = titleMap[i].name;\r\n              newTitleMap.push({ name, value });\r\n              if (!value) { hasEmptyValue = true; }\r\n            }\r\n          } else if (isString(titleMap[i])) { // React Jsonschema Form style\r\n            if (i < enumList.length) {\r\n              const /** @type {?} */ name: string = titleMap[i];\r\n              const /** @type {?} */ value: any = enumList[i];\r\n              newTitleMap.push({ name, value });\r\n              if (!value) { hasEmptyValue = true; }\r\n            }\r\n          }\r\n        }\r\n      } else { // If array titleMap and no enum list, just return the titleMap\r\n        newTitleMap = titleMap;\r\n        if (!fieldRequired) { hasEmptyValue = !!newTitleMap.filter(i => !i.value).length; }\r\n      }\r\n    } else if (enumList) { // Alternate JSON Form style, with enum list\r\n      for (let /** @type {?} */ i of Object.keys(enumList)) {\r\n        let /** @type {?} */ value: any = enumList[i];\r\n        if (hasOwn(titleMap, value)) {\r\n          let /** @type {?} */ name: string = titleMap[value];\r\n          newTitleMap.push({ name, value });\r\n          if (!value) { hasEmptyValue = true; }\r\n        }\r\n      }\r\n    } else { // Alternate JSON Form style, without enum list\r\n      for (let /** @type {?} */ value of Object.keys(titleMap)) {\r\n        let /** @type {?} */ name: string = titleMap[value];\r\n        newTitleMap.push({ name, value });\r\n        if (!value) { hasEmptyValue = true; }\r\n      }\r\n    }\r\n  } else if (enumList) { // Build map from enum list alone\r\n    for (let /** @type {?} */ i of Object.keys(enumList)) {\r\n      let /** @type {?} */ name: string = enumList[i];\r\n      let /** @type {?} */ value: any = enumList[i];\r\n      newTitleMap.push({ name, value});\r\n      if (!value) { hasEmptyValue = true; }\r\n    }\r\n  } else { // If no titleMap and no enum list, return default map of boolean values\r\n    newTitleMap = [{ name: 'True', value: true }, { name: 'False', value: false }];\r\n  }\r\n  if (!fieldRequired && !hasEmptyValue) {\r\n    newTitleMap.unshift({ name: '', value: '' });\r\n  }\r\n  return newTitleMap;\r\n}\r\n"]}