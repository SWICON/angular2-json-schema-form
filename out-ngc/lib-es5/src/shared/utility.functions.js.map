{"version":3,"sources":["../../../lib/src/shared/utility.functions.ts"],"names":[],"mappings":"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","file":"utility.functions.js","sourceRoot":"","sourcesContent":["import {\r\n  hasValue, inArray, isArray, isDefined, isObject, isEmpty, isMap, isSet,\r\n  isString, PlainObject\r\n} from './validator.functions';\n/**\n * 'addClasses' function\r\r\\@param {string | string[] | Set<string>} oldClasses\r\\@param {string | string[] | Set<string>} newClasses\r\\@return {string | string[] | Set<string>} - Combined classes\n * @param {?} oldClasses\n * @param {?} newClasses\n * @return {?}\n */\nexport function addClasses(\r\n  oldClasses: string | string[] | Set<string>,\r\n  newClasses: string | string[] | Set<string>\r\n): string | string[] | Set<string> {\r\n  const /** @type {?} */ badType = i => !isSet(i) && !isArray(i) && !isString(i);\r\n  if (badType(newClasses)) { return oldClasses; }\r\n  if (badType(oldClasses)) { oldClasses = ''; }\r\n  const /** @type {?} */ toSet = i => isSet(i) ? i : isArray(i) ? new Set(i) : new Set(i.split(' '));\r\n  let /** @type {?} */ combinedSet: Set<any> = toSet(oldClasses);\r\n  let /** @type {?} */ newSet: Set<any> = toSet(newClasses);\r\n  newSet.forEach(c => combinedSet.add(c));\r\n  if (isSet(oldClasses)) { return combinedSet; }\r\n  if (isArray(oldClasses)) { return Array.from(combinedSet); }\r\n  return Array.from(combinedSet).join(' ');\r\n}\n/**\n * 'copy' function\r\rMakes a shallow copy of a JavaScript object, array, Map, or Set.\rIf passed a JavaScript primitive value (string, number, boolean, or null),\rit returns the value.\r\r\\@param {Object|Array|string|number|boolean|null} object - The object to copy\r\\@return {Object|Array|string|number|boolean|null} - The copied object\n * @param {?} object\n * @return {?}\n */\nexport function copy(object: any): any {\r\n  if (typeof object !== 'object' || object === null) { return object; }\r\n  if (isObject(object)) { return Object.assign({}, object); }\r\n  if (isArray(object)) { return [].concat(object); }\r\n  if (isMap(object)) { return new Map(object); }\r\n  if (isSet(object)) { return new Set(object); }\r\n  console.error('copy error: Object to copy must be a JavaScript object or value.');\r\n}\n/**\n * 'forEach' function\r\rIterates over all items in the first level of an object or array\rand calls an iterator funciton on each item.\r\rThe iterator function is called with four values:\r1. The current item's value\r2. The current item's key\r3. The parent object, which contains the current item\r4. The root object\r\rSetting the optional third parameter to 'top-down' or 'bottom-up' will cause\rit to also recursively iterate over items in sub-objects or sub-arrays in the\rspecified direction.\r\r\\@param {Object|Array} object - The object or array to iterate over\r\\@param {function} fn - the iterator funciton to call on each item\r\\@return {void}\n * @param {?} object\n * @param {?} fn\n * @param {?=} recurse\n * @param {?=} rootObject\n * @return {?}\n */\nexport function forEach(\r\n  object: any, fn: (v: any, k?: string | number, c?: any, rc?: any) => any,\r\n  recurse: boolean | string = false, rootObject: any = object\r\n): void {\r\n  if (isEmpty(object)) { return; }\r\n  if ((isObject(object) || isArray(object)) && typeof fn === 'function') {\r\n    for (let /** @type {?} */ key of Object.keys(object)) {\r\n      const /** @type {?} */ value = object[key];\r\n      if (recurse === 'bottom-up' && (isObject(value) || isArray(value))) {\r\n        forEach(value, fn, recurse, rootObject);\r\n      }\r\n      fn(value, key, object, rootObject);\r\n      if (recurse === 'top-down' && (isObject(value) || isArray(value))) {\r\n        forEach(value, fn, recurse, rootObject);\r\n      }\r\n    }\r\n  } else if (typeof fn !== 'function') {\r\n    console.error('forEach error: Iterator must be a function.');\r\n    console.error(fn);\r\n  } else {\r\n    console.error('forEach error: Input object must be an object or array.');\r\n    console.error(object);\r\n  }\r\n}\n/**\n * 'forEachCopy' function\r\rIterates over all items in the first level of an object or array\rand calls an iterator function on each item. Returns a new object or array\rwith the same keys or indexes as the original, and values set to the results\rof the iterator function.\r\rDoes NOT recursively iterate over items in sub-objects or sub-arrays.\r\r\\@param {Object|Array} object - The object or array to iterate over\r\\@param {function} fn - The iterator funciton to call on each item\r\\@param {any = null} context - Context in which to call the iterator function\r\\@return {Object|Array} - The resulting object or array\n * @param {?} object\n * @param {?} fn\n * @return {?}\n */\nexport function forEachCopy(\r\n  object: any, fn: (v: any, k?: string | number, o?: any, p?: string) => any\r\n): any {\r\n  if (!hasValue(object)) { return; }\r\n  if ((isObject(object) || isArray(object)) && typeof fn !== 'function') {\r\n    let /** @type {?} */ newObject: any = isArray(object) ? [] : {};\r\n    for (let /** @type {?} */ key of Object.keys(object)) {\r\n      newObject[key] = fn(object[key], key, object);\r\n    }\r\n    return newObject;\r\n  }\r\n  if (typeof fn !== 'function') {\r\n    console.error('forEachCopy error: Iterator must be a function.');\r\n    console.error(fn);\r\n  } else {\r\n    console.error('forEachCopy error: Input object must be an object or array.');\r\n    console.error(object);\r\n  }\r\n}\n/**\n * 'hasOwn' utility function\r\rChecks whether an object has a particular property.\r\r\\@param {any} object - the object to check\r\\@param {string} property - the property to look for\r\\@return {boolean} - true if object has property, false if not\n * @param {?} object\n * @param {?} property\n * @return {?}\n */\nexport function hasOwn(object: any, property: string): boolean {\r\n  if (!isObject(object) && !isArray(object)) { return false; }\r\n  return object.hasOwnProperty(property);\r\n}\n/**\n * 'mergeFilteredObject' utility function\r\rShallowly merges two objects, setting key and values from source object\rin target object, excluding specified keys.\r\rOptionally, it can also use functions to transform the key names and/or\rthe values of the merging object.\r\r\\@param {PlainObject} targetObject - Target object to add keys and values to\r\\@param {PlainObject} sourceObject - Source object to copy keys and values from\r\\@param {string[]} excludeKeys - Array of keys to exclude\r\\@param {(string: string) => string = (k) => k} keyFn - Function to apply to keys\r\\@param {(any: any) => any = (v) => v} valueFn - Function to apply to values\r\\@return {PlainObject} - Returns targetObject\n * @param {?} targetObject\n * @param {?} sourceObject\n * @param {?=} excludeKeys\n * @param {?=} keyFn\n * @param {?=} valFn\n * @return {?}\n */\nexport function mergeFilteredObject(\r\n  targetObject: PlainObject,\r\n  sourceObject: PlainObject,\r\n  excludeKeys: any[] = [],\r\n  keyFn: (string: string) => string = (key: string) => key,\r\n  valFn: (any: any) => any = (val: any) => val\r\n): PlainObject {\r\n  if (!isObject(sourceObject)) { return targetObject; }\r\n  if (!isObject(targetObject)) { targetObject = {}; }\r\n  for (let /** @type {?} */ key of Object.keys(sourceObject)) {\r\n    if (!inArray(key, excludeKeys) && isDefined(sourceObject[key])) {\r\n      targetObject[keyFn(key)] = valFn(sourceObject[key]);\r\n    }\r\n  }\r\n  return targetObject;\r\n}\n/**\n * 'parseText' function\r\r\\@param  {string = ''} text -\r\\@param  {any = {}} value -\r\\@param  {number = null} index -\r\\@return {string} -\n * @param {?=} text\n * @param {?=} value\n * @param {?=} values\n * @param {?=} key\n * @param {?=} tpldata\n * @return {?}\n */\nexport function parseText(\r\n  text: string = '', value: any = {}, values: any = {},\r\n  key: number|string = null, tpldata: any = null\r\n): string {\r\n  if (!text) { return text; }\r\n  let /** @type {?} */ idx: number = null; // For JSON Form API compatibility\r\n  let /** @type {?} */ $index: number = null; // For Angular Schema Form API compatibility\r\n  if (typeof key === 'number') { idx = $index = key + 1; }\r\n  try {\r\n      return text.replace(/{{.+?}}/g, exp => eval(exp.slice(2, -2)));\r\n  } catch ( /** @type {?} */error) {\r\n    try {\r\n      return (tpldata) ?\r\n        text.replace(/{{.+?}}/g, exp => eval('tpldata.' + exp.slice(2, -2))) :\r\n        text.replace(/{{.+?}}/g, exp => eval('this.' + exp.slice(2, -2)));\r\n    } catch ( /** @type {?} */error) { }\r\n    console.error('parseText error: ');\r\n    console.error(error);\r\n    return text;\r\n  }\r\n}\n/**\n * 'toTitleCase' function\r\rIntelligently converts an input string to Title Case.\r\rAccepts an optional second parameter with a list of additional\rwords and abbreviations to force into a particular case.\r\rThis function is built on prior work by John Gruber and David Gouch:\rhttp://daringfireball.net/2008/08/title_case_update\rhttps://github.com/gouch/to-title-case\r\r\\@param {string} input -\r\\@param {string|string[]} forceWords? -\r\\@return {string} -\n * @param {?} input\n * @param {?=} forceWords\n * @return {?}\n */\nexport function toTitleCase(input: string, forceWords?: string|string[]): string {\r\n  if (!isString(input)) { return input; }\r\n  let /** @type {?} */ forceArray: string[] = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'en',\r\n   'for', 'if', 'in', 'nor', 'of', 'on', 'or', 'per', 'the', 'to', 'v', 'v.',\r\n   'vs', 'vs.', 'via'];\r\n  if (isString(forceWords)) { forceWords = forceWords.split('|'); }\r\n  if (isArray(forceWords)) { forceArray = forceArray.concat(forceWords); }\r\n  const /** @type {?} */ forceArrayLower: string[] = forceArray.map(w => w.toLowerCase());\r\n  const /** @type {?} */ noInitialCase: boolean =\r\n    input === input.toUpperCase() || input === input.toLowerCase();\r\n  let /** @type {?} */ prevLastChar: string = '';\r\n  input = input.trim();\r\n  return input.replace(/[A-Za-z0-9\\u00C0-\\u00FF]+[^\\s-]*/g, (word, idx) => {\r\n    if (!noInitialCase && word.slice(1).search(/[A-Z]|\\../) !== -1) {\r\n      return word;\r\n    } else {\r\n      let /** @type {?} */ newWord: string;\r\n      const /** @type {?} */ forceWord: string =\r\n        forceArray[forceArrayLower.indexOf(word.toLowerCase())];\r\n      if (!forceWord) {\r\n        if (noInitialCase) {\r\n          if (word.slice(1).search(/\\../) !== -1) {\r\n            newWord = word.toLowerCase();\r\n          } else {\r\n            newWord = word[0].toUpperCase() + word.slice(1).toLowerCase();\r\n          }\r\n        } else {\r\n          newWord = word[0].toUpperCase() + word.slice(1);\r\n        }\r\n      } else if (\r\n        forceWord === forceWord.toLowerCase() && (\r\n          idx === 0 || idx + word.length === input.length ||\r\n          prevLastChar === ':' || input[idx - 1].search(/[^\\s-]/) !== -1 ||\r\n          (input[idx - 1] !== '-' && input[idx + word.length] === '-')\r\n        )\r\n      ) {\r\n        newWord = forceWord[0].toUpperCase() + forceWord.slice(1);\r\n      } else {\r\n        newWord = forceWord;\r\n      }\r\n      prevLastChar = word.slice(-1);\r\n      return newWord;\r\n    }\r\n  });\r\n};\r\n"]}