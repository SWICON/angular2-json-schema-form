{"version":3,"sources":["../../../../lib/src/framework-library/material-design-framework/material-checkboxes.component.ts"],"names":[],"mappings":"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","file":"material-checkboxes.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormArray, AbstractControl } from '@angular/forms';\r\n\r\nimport { JsonSchemaFormService, CheckboxItem } from '../../json-schema-form.service';\r\nimport { buildFormGroup, buildTitleMap, JsonPointer } from '../../shared/index';\nexport class MaterialCheckboxesComponent implements OnInit {\r\n  formControl: AbstractControl;\r\n  controlName: string;\r\n  controlValue: any;\r\n  controlDisabled: boolean = false;\r\n  boundControl: boolean = false;\r\n  options: any;\r\n  horizontalList: boolean = false;\r\n  formArray: AbstractControl;\r\n  checkboxList: CheckboxItem[] = [];\r\n   formID: number;\r\n   layoutNode: any;\r\n   layoutIndex: number[];\r\n   dataIndex: number[];\n/**\n * @param {?} jsf\n */\nconstructor(\nprivate jsf: JsonSchemaFormService\r\n  ) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this.options = this.layoutNode.options || {};\r\n    this.horizontalList = this.layoutNode.type === 'checkboxes-inline' ||\r\n      this.layoutNode.type === 'checkboxbuttons';\r\n    this.jsf.initializeControl(this);\r\n    this.checkboxList = buildTitleMap(\r\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\r\n    );\r\n    if (this.boundControl) {\r\n      const /** @type {?} */ formArray = this.jsf.getControl(this);\r\n      for (let /** @type {?} */ checkboxItem of this.checkboxList) {\r\n        checkboxItem.checked = formArray.value.indexOf(checkboxItem.value) !== -1;\r\n      }\r\n    }\r\n  }\n/**\n * @return {?}\n */\nget allChecked(): boolean {\r\n    return this.checkboxList.filter(t => t.checked).length === this.checkboxList.length;\r\n  }\n/**\n * @return {?}\n */\nget someChecked(): boolean {\r\n    const /** @type {?} */ checkedItems = this.checkboxList.filter(t => t.checked).length;\r\n    return checkedItems > 0 && checkedItems < this.checkboxList.length;\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nupdateValue(event: any) {\r\n    if (this.boundControl) {\r\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList);\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nupdateAllValues(event: any) {\r\n    this.checkboxList.forEach(t => t.checked = event.checked);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'material-checkboxes-widget',\r\n  template: `\r\n    <md-checkbox type=\"checkbox\"\r\n      [color]=\"options?.color || 'primary'\"\r\n      [disabled]=\"controlDisabled || options?.readonly\"\r\n      [name]=\"options?.name\"\r\n      [checked]=\"allChecked\"\r\n      [indeterminate]=\"someChecked\"\r\n      (change)=\"updateAllValues($event)\">\r\n      <span class=\"checkbox-name\" [innerHTML]=\"options?.name\"></span>\r\n    </md-checkbox>\r\n    <label *ngIf=\"options?.title\"\r\n      [class]=\"options?.labelHtmlClass\"\r\n      [style.display]=\"options?.notitle ? 'none' : ''\"\r\n      [innerHTML]=\"options?.title\"></label>\r\n    <ul class=\"checkbox-list\" [class.horizontal-list]=\"horizontalList\">\r\n      <li *ngFor=\"let checkboxItem of checkboxList\"\r\n        [class]=\"options?.htmlClass\">\r\n        <md-checkbox type=\"checkbox\"\r\n          [(ngModel)]=\"checkboxItem.checked\"\r\n          [color]=\"options?.color || 'primary'\"\r\n          [disabled]=\"controlDisabled || options?.readonly\"\r\n          [name]=\"checkboxItem?.name\"\r\n          (change)=\"updateValue($event)\">\r\n          <span class=\"checkbox-name\" [innerHTML]=\"checkboxItem?.name\"></span>\r\n        </md-checkbox>\r\n      </li>\r\n    </ul>`,\r\n  styles: [`\r\n    .checkbox-list { list-style-type: none; }\r\n    .horizontal-list > li {\r\n      display: inline-block;\r\n      margin-right: 10px;\r\n      zoom: 1;\r\n    }\r\n    .checkbox-name { white-space: nowrap; }\r\n  `],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonSchemaFormService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formID': [{ type: Input },],\n'layoutNode': [{ type: Input },],\n'layoutIndex': [{ type: Input },],\n'dataIndex': [{ type: Input },],\n};\n}\n\nfunction MaterialCheckboxesComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialCheckboxesComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialCheckboxesComponent.ctorParameters;\n/** @type {?} */\nMaterialCheckboxesComponent.propDecorators;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.formControl;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.controlName;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.controlValue;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.controlDisabled;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.boundControl;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.options;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.horizontalList;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.formArray;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.checkboxList;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.formID;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.layoutNode;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.layoutIndex;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.dataIndex;\n/** @type {?} */\nMaterialCheckboxesComponent.prototype.jsf;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}