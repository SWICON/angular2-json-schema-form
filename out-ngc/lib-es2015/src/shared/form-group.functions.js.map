{"version":3,"sources":["../../../lib/src/shared/form-group.functions.ts"],"names":[],"mappings":"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","file":"form-group.functions.js","sourceRoot":"","sourcesContent":["import {\r\n  AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn\r\n} from '@angular/forms';\r\n\r\nimport * as _ from 'lodash/index';\r\n\r\nimport {\r\n  hasValue, inArray, isArray, isEmpty, isObject, isDefined, isPrimitive,\r\n  toJavaScriptType, toSchemaType, SchemaPrimitiveType\r\n} from './validator.functions';\r\nimport { forEach, hasOwn } from './utility.functions';\r\nimport { Pointer, JsonPointer } from './jsonpointer.functions';\r\nimport { JsonValidators } from './json.validators';\r\nimport { getControlValidators, resolveRecursiveReferences } from './json-schema.functions';\n/**\n * 'buildFormGroupTemplate' function\r\rBuilds a template for an Angular FormGroup from a JSON Schema.\r\rTODO: add support for pattern properties\rhttps://spacetelescope.github.io/understanding-json-schema/reference/object.html\r\r\\@param  {any} jsf -\r\\@param  {any = null} setValues -\r\\@param  {boolean = true} mapArrays -\r\\@param  {string = ''} schemaPointer -\r\\@param  {string = ''} dataPointer -\r\\@param  {any = ''} templatePointer -\r\\@return {any} -\n * @param {?} jsf\n * @param {?=} setValues\n * @param {?=} mapArrays\n * @param {?=} schemaPointer\n * @param {?=} dataPointer\n * @param {?=} templatePointer\n * @return {?}\n */\nexport function buildFormGroupTemplate(\r\n  jsf: any, setValues: any = null, mapArrays: boolean = true,\r\n  schemaPointer: string = '', dataPointer: string = '', templatePointer: any = ''\r\n): any {\r\n  const /** @type {?} */ schema: any = JsonPointer.get(jsf.schema, schemaPointer);\r\n  let /** @type {?} */ useValues: any = jsf.globalOptions.setSchemaDefaults ?\r\n    mergeValues(JsonPointer.get(schema, '/default'), setValues) : setValues;\r\n  const /** @type {?} */ schemaType: string | string[] = JsonPointer.get(schema, '/type');\r\n  let /** @type {?} */ controlType: 'FormGroup' | 'FormArray' | 'FormControl' | '$ref';\r\n  if (schemaType === 'object' && hasOwn(schema, 'properties')) {\r\n    controlType = 'FormGroup';\r\n  } else if (schemaType === 'array' && hasOwn(schema, 'items')) {\r\n    controlType = 'FormArray';\r\n  } else if (!schemaType && hasOwn(schema, '$ref')) {\r\n    controlType = '$ref';\r\n  } else {\r\n    controlType = 'FormControl';\r\n  }\r\n  if (dataPointer !== '' && !jsf.dataMap.has(dataPointer)) {\r\n    jsf.dataMap.set(dataPointer, new Map);\r\n    jsf.dataMap.get(dataPointer).set('schemaPointer', schemaPointer);\r\n    jsf.dataMap.get(dataPointer).set('schemaType', schema.type);\r\n    if (controlType) {\r\n      jsf.dataMap.get(dataPointer).set('templatePointer', templatePointer);\r\n      jsf.dataMap.get(dataPointer).set('templateType', controlType);\r\n    }\r\n    const /** @type {?} */ genericDataPointer =\r\n      JsonPointer.toGenericPointer(dataPointer, jsf.arrayMap);\r\n    if (!jsf.dataMap.has(genericDataPointer)) {\r\n      jsf.dataMap.set(genericDataPointer, new Map);\r\n      jsf.dataMap.get(genericDataPointer).set('schemaPointer', schemaPointer);\r\n      jsf.dataMap.get(genericDataPointer).set('schemaType', schema.type);\r\n    }\r\n  }\r\n  let /** @type {?} */ controls: any;\r\n  let /** @type {?} */ validators: any = getControlValidators(schema);\r\n  switch (controlType) {\r\n    case 'FormGroup':\r\n      controls = {};\r\n      if (jsf.globalOptions.setSchemaDefaults) {\r\n        useValues = mergeValues(JsonPointer.get(schema, '/properties/default'), useValues);\r\n      }\r\n      let /** @type {?} */ propertyKeys = schema['ui:order'] ||\r\n        schema.properties['ui:order'] ||\r\n        Object.keys(schema.properties);\r\n      for (let /** @type {?} */ key of propertyKeys) {\r\n        controls[key] = buildFormGroupTemplate(\r\n          jsf, JsonPointer.get(useValues, [ /** @type {?} */((<string>key))]), mapArrays,\r\n          schemaPointer + '/properties/' + key,\r\n          dataPointer + '/' + key,\r\n          templatePointer + '/controls/' + key\r\n        );\r\n      }\r\n      jsf.globalOptions.fieldsRequired = setRequiredFields(schema, controls);\r\n      return { controlType, controls, validators };\r\n    case 'FormArray':\r\n      const /** @type {?} */ minItems = schema.minItems || 0;\r\n      const /** @type {?} */ maxItems = schema.maxItems || 1000000;\r\n      if (isArray(schema.items)) { // 'items' is an array = tuple items\r\n        if (mapArrays && !jsf.arrayMap.get(dataPointer)) {\r\n          jsf.arrayMap.set(dataPointer, schema.items.length);\r\n        }\r\n        controls = [];\r\n        for (let /** @type {?} */ i = 0, /** @type {?} */ l = schema.items.length; i < l; i++) {\r\n          if (i >= minItems &&\r\n            !JsonPointer.has(jsf.templateRefLibrary, [dataPointer + '/' + i])\r\n          ) {\r\n            jsf.templateRefLibrary[dataPointer + '/' + i] =\r\n              buildFormGroupTemplate(\r\n                jsf, null, mapArrays,\r\n                schemaPointer + '/items/' + i,\r\n                dataPointer + '/' + i,\r\n                templatePointer + '/controls/' + i\r\n              );\r\n          }\r\n          if (i < maxItems) {\r\n            const /** @type {?} */ useValue = isArray(useValues) ? useValues[i] : useValues;\r\n            controls.push(buildFormGroupTemplate(\r\n              jsf, useValue, false,\r\n              schemaPointer + '/items/' + i,\r\n              dataPointer + '/' + i,\r\n              templatePointer + '/controls/' + i\r\n            ));\r\n          }\r\n        }\r\n        if (schema.items.length < maxItems &&\r\n          hasOwn(schema, 'additionalItems') && isObject(schema.additionalItems)\r\n        ) { // 'additionalItems' is an object = additional list items\r\n          const /** @type {?} */ l = Math.max(\r\n            schema.items.length + 1,\r\n            isArray(useValues) ? useValues.length : 0\r\n          );\r\n          for (let /** @type {?} */ i = schema.items.length; i < l; i++) {\r\n            const /** @type {?} */ useValue = isArray(useValues) ? useValues[i] : useValues;\r\n            controls.push(buildFormGroupTemplate(\r\n              jsf, useValue, false,\r\n              schemaPointer + '/additionalItems',\r\n              dataPointer + '/' + i,\r\n              templatePointer + '/controls/' + i\r\n            ));\r\n            if (isArray(useValues)) { useValues = null; }\r\n          }\r\n          if (\r\n            !JsonPointer.has(jsf, ['templateRefLibrary', dataPointer + '/-'])\r\n          ) {\r\n            jsf.templateRefLibrary[dataPointer + '/-'] =\r\n              buildFormGroupTemplate(\r\n                jsf, null, mapArrays,\r\n                schemaPointer + '/additionalItems',\r\n                dataPointer + '/-',\r\n                templatePointer + '/controls/-'\r\n              );\r\n          }\r\n        }\r\n      } else { // 'items' is an object = list items only (no tuple items)\r\n        if (mapArrays && !jsf.arrayMap.get(dataPointer)) {\r\n          jsf.arrayMap.set(dataPointer, 0);\r\n        }\r\n        if (\r\n          !JsonPointer.has(jsf.templateRefLibrary, [dataPointer + '/-'])\r\n        ) {\r\n          jsf.templateRefLibrary[dataPointer + '/-'] =\r\n            buildFormGroupTemplate(\r\n              jsf, null, mapArrays,\r\n              schemaPointer + '/items',\r\n              dataPointer + '/-',\r\n              templatePointer + '/controls/-'\r\n            );\r\n        }\r\n        controls = [];\r\n        if (jsf.globalOptions.setSchemaDefaults) {\r\n          useValues = mergeValues(\r\n            JsonPointer.get(schema, '/items/default'), useValues);\r\n        }\r\n        if (isArray(useValues) && useValues.length) {\r\n          for (let /** @type {?} */ i of Object.keys(useValues)) {\r\n            controls.push(buildFormGroupTemplate(\r\n              jsf, useValues[i], false,\r\n              schemaPointer + '/items',\r\n              dataPointer + '/' + i,\r\n              templatePointer + '/controls/' + i\r\n            ));\r\n          }\r\n          useValues = null;\r\n        }\r\n      }\r\n      let /** @type {?} */ initialItemCount =\r\n        Math.max(minItems, JsonPointer.has(schema, '/items/$ref') ? 0 : 1);\r\n      if (controls.length < initialItemCount) {\r\n        for (let /** @type {?} */ i = controls.length, /** @type {?} */ l = initialItemCount; i < l; i++) {\r\n          controls.push(buildFormGroupTemplate(\r\n            jsf, useValues, false,\r\n            schemaPointer + '/items',\r\n            dataPointer + '/' + i,\r\n            templatePointer + '/controls/' + i\r\n          ));\r\n        }\r\n      }\r\n      return { controlType, controls, validators };\r\n    case 'FormControl':\r\n      let /** @type {?} */ value: { value: any, disabled: boolean } = {\r\n        value: isPrimitive(useValues) ? useValues : null,\r\n        disabled: schema['disabled'] ||\r\n          JsonPointer.get(schema, '/x-schema-form/disabled') || false\r\n      };\r\n      return { controlType, value, validators };\r\n    case '$ref':\r\n      const /** @type {?} */ schemaRef: string = JsonPointer.compile(schema.$ref);\r\n      if (!hasOwn(jsf.templateRefLibrary, schemaRef)) {\r\n\r\n        // Set to null first to prevent recursive reference from causing endless loop\r\n        jsf.templateRefLibrary[schemaRef] = null;\r\n        const /** @type {?} */ newTemplate: any = buildFormGroupTemplate(jsf, null, false, schemaRef);\r\n        if (newTemplate) {\r\n          jsf.templateRefLibrary[schemaRef] = newTemplate;\r\n        } else {\r\n          delete jsf.templateRefLibrary[schemaRef];\r\n        }\r\n      }\r\n      return null;\r\n    default:\r\n      return null;\r\n  }\r\n}\n/**\n * 'buildFormGroup' function\r\r\\@param {any} template -\r\\@return {AbstractControl}\n * @param {?} template\n * @return {?}\n */\nexport function buildFormGroup(template: any): AbstractControl {\r\n  let /** @type {?} */ validatorFns: ValidatorFn[] = [];\r\n  let /** @type {?} */ validatorFn: ValidatorFn = null;\r\n  if (hasOwn(template, 'validators')) {\r\n    forEach(template.validators, (parameters, validator) => {\r\n      if (typeof JsonValidators[validator] === 'function') {\r\n        validatorFns.push(JsonValidators[validator].apply(null, parameters));\r\n      }\r\n    });\r\n    if (validatorFns.length &&\r\n      inArray(template.controlType, ['FormGroup', 'FormArray'])\r\n    ) {\r\n      validatorFn = validatorFns.length > 1 ?\r\n        JsonValidators.compose(validatorFns) : validatorFns[0];\r\n    }\r\n  }\r\n  if (hasOwn(template, 'controlType')) {\r\n    switch (template.controlType) {\r\n      case 'FormGroup':\r\n        let /** @type {?} */ groupControls: { [key: string]: AbstractControl } = {};\r\n        forEach(template.controls, (controls, key) => {\r\n          let /** @type {?} */ newControl: AbstractControl = buildFormGroup(controls);\r\n          if (newControl) { groupControls[key] = newControl; }\r\n        });\r\n        return new FormGroup(groupControls, validatorFn);\r\n      case 'FormArray':\r\n        return new FormArray(_.filter(_.map(template.controls,\r\n          controls => buildFormGroup(controls)\r\n        )), validatorFn);\r\n      case 'FormControl':\r\n        return new FormControl(template.value, validatorFns);\r\n    }\r\n  }\r\n  return null;\r\n}\n/**\n * 'mergeValues' function\r\r\\@param  {any[]} ...valuesToMerge - Multiple values to merge\r\\@return {any} - Merged values\n * @param {...?} valuesToMerge\n * @return {?}\n */\nexport function mergeValues(...valuesToMerge) {\r\n  let /** @type {?} */ mergedValues: any = null;\r\n  for (let /** @type {?} */ index = 0, /** @type {?} */ length = arguments.length; index < length; index++) {\r\n    const /** @type {?} */ currentValue = arguments[index];\r\n    if (!isEmpty(currentValue)) {\r\n      if (typeof currentValue === 'object' &&\r\n        (isEmpty(mergedValues) || typeof mergedValues !== 'object')\r\n      ) {\r\n        if (isArray(currentValue)) {\r\n          mergedValues = [].concat(currentValue);\r\n        } else if (isObject(currentValue)) {\r\n          mergedValues = Object.assign({}, currentValue);\r\n        }\r\n      } else if (typeof currentValue !== 'object') {\r\n        mergedValues = currentValue;\r\n      } else if (isObject(mergedValues) && isObject(currentValue)) {\r\n        Object.assign(mergedValues, currentValue);\r\n      } else if (isObject(mergedValues) && isArray(currentValue)) {\r\n        let /** @type {?} */ newValues = [];\r\n        for (let /** @type {?} */ value of currentValue) {\r\n          newValues.push(mergeValues(mergedValues, value));\r\n        }\r\n        mergedValues = newValues;\r\n      } else if (isArray(mergedValues) && isObject(currentValue)) {\r\n        let /** @type {?} */ newValues = [];\r\n        for (let /** @type {?} */ value of mergedValues) {\r\n          newValues.push(mergeValues(value, currentValue));\r\n        }\r\n        mergedValues = newValues;\r\n      } else if (isArray(mergedValues) && isArray(currentValue)) {\r\n        let /** @type {?} */ newValues = [];\r\n        const /** @type {?} */ l = Math.max(mergedValues.length, currentValue.length);\r\n        for (let /** @type {?} */ i = 0; i < l; i++) {\r\n          if (i < mergedValues.length && i < currentValue.length) {\r\n            newValues.push(mergeValues(mergedValues[i], currentValue[i]));\r\n          } else if (i < mergedValues.length) {\r\n            newValues.push(mergedValues[i]);\r\n          } else if (i < currentValue.length) {\r\n            newValues.push(currentValue[i]);\r\n          }\r\n        }\r\n        mergedValues = newValues;\r\n      }\r\n    }\r\n  }\r\n  return mergedValues;\r\n}\n/**\n * 'setRequiredFields' function\r\r\\@param {schema} schema - JSON Schema\r\\@param {object} formControlTemplate - Form Control Template object\r\\@return {boolean} - true if any fields have been set to required, false if not\n * @param {?} schema\n * @param {?} formControlTemplate\n * @return {?}\n */\nexport function setRequiredFields(schema: any, formControlTemplate: any): boolean {\r\n  let /** @type {?} */ fieldsRequired = false;\r\n  if (hasOwn(schema, 'required') && !isEmpty(schema.required)) {\r\n    fieldsRequired = true;\r\n    let /** @type {?} */ requiredArray = isArray(schema.required) ? schema.required : [schema.required];\r\n    requiredArray = forEach(requiredArray,\r\n      key => JsonPointer.set(formControlTemplate, '/' + key + '/validators/required', [])\r\n    );\r\n  }\r\n  return fieldsRequired;\r\n\r\n  // TODO: Add support for patternProperties\r\n  // https://spacetelescope.github.io/understanding-json-schema/reference/object.html\r\n  //   #pattern-properties\r\n}\n/**\n * 'formatFormData' function\r\r\\@param {any} formData - Angular FormGroup data object\r\\@param  {Map<string, any>} dataMap -\r\\@param  {Map<string, string>} recursiveRefMap -\r\\@param  {Map<string, number>} arrayMap -\r\\@param {boolean = false} fixErrors - if TRUE, tries to fix data\r\\@return {any} - formatted data object\n * @param {?} formData\n * @param {?} dataMap\n * @param {?} recursiveRefMap\n * @param {?} arrayMap\n * @param {?=} returnEmptyFields\n * @param {?=} fixErrors\n * @return {?}\n */\nexport function formatFormData(\r\n  formData: any, dataMap: Map<string, any>,\r\n  recursiveRefMap: Map<string, string>, arrayMap: Map<string, number>,\r\n  returnEmptyFields: boolean = false, fixErrors: boolean = false\r\n): any {\r\n  let /** @type {?} */ formattedData = {};\r\n  JsonPointer.forEachDeep(formData, (value, dataPointer) => {\r\n    if (typeof value !== 'object' || (value === null && returnEmptyFields)) {\r\n      let /** @type {?} */ genericPointer: string =\r\n        JsonPointer.has(dataMap, [dataPointer, 'schemaType']) ?\r\n          dataPointer :\r\n          resolveRecursiveReferences(dataPointer, recursiveRefMap, arrayMap);\r\n      if (JsonPointer.has(dataMap, [genericPointer, 'schemaType'])) {\r\n        const /** @type {?} */ schemaType: SchemaPrimitiveType | SchemaPrimitiveType[] =\r\n          dataMap.get(genericPointer).get('schemaType');\r\n        if (schemaType === 'null') {\r\n          JsonPointer.set(formattedData, dataPointer, null);\r\n        } else if ( (hasValue(value) || returnEmptyFields) &&\r\n          inArray(schemaType, ['string', 'integer', 'number', 'boolean'])\r\n        ) {\r\n          const /** @type {?} */ newValue = (fixErrors || (value === null && returnEmptyFields)) ?\r\n            toSchemaType(value, schemaType) :\r\n            toJavaScriptType(value, schemaType);\r\n          if (isDefined(newValue) || returnEmptyFields) {\r\n            JsonPointer.set(formattedData, dataPointer, newValue);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(\r\n          'formatFormData error: Schema type not found for form value at ' +\r\n          genericPointer\r\n        );\r\n        console.error(formData);\r\n        console.error(dataMap);\r\n        console.error(recursiveRefMap);\r\n        console.error(arrayMap);\r\n      }\r\n    }\r\n  });\r\n  return formattedData;\r\n}\n/**\n * 'getControl' function\r\rUses a JSON Pointer for a data object to retrieve a control from\ran Angular formGroup or formGroup template. (Note: though a formGroup\rtemplate is much simpler, its basic structure is idential to a formGroup).\r\rIf the optional third parameter 'returnGroup' is set to TRUE, the group\rcontaining the control is returned, rather than the control itself.\r\r\\@param {FormGroup} formGroup - Angular FormGroup to get value from\r\\@param {Pointer} dataPointer - JSON Pointer (string or array)\r\\@param {boolean = false} returnGroup - If true, return group containing control\r\\@return {group} - Located value (or true or false, if returnError = true)\n * @param {?} formGroup\n * @param {?} dataPointer\n * @param {?=} returnGroup\n * @return {?}\n */\nexport function getControl(\r\n  formGroup: any, dataPointer: Pointer, returnGroup: boolean = false\r\n): any {\r\n  const /** @type {?} */ dataPointerArray: string[] = JsonPointer.parse(dataPointer);\r\n  let /** @type {?} */ subGroup = formGroup;\r\n  if (dataPointerArray !== null) {\r\n    let /** @type {?} */ l = dataPointerArray.length - (returnGroup ? 1 : 0);\r\n    for (let /** @type {?} */ i = 0; i < l; ++i) {\r\n      let /** @type {?} */ key = dataPointerArray[i];\r\n      if (subGroup.hasOwnProperty('controls')) {\r\n        subGroup = subGroup.controls;\r\n      }\r\n      if (isArray(subGroup) && (key === '-')) {\r\n        subGroup = subGroup[subGroup.length - 1];\r\n      } else if (subGroup.hasOwnProperty(key)) {\r\n        subGroup = subGroup[key];\r\n      } else {\r\n        console.error('getControl error: Unable to find \"' + key +\r\n          '\" item in FormGroup.');\r\n        console.error(dataPointer);\r\n        console.error(formGroup);\r\n        return;\r\n      }\r\n    }\r\n    return subGroup;\r\n  }\r\n  console.error('getControl error: Invalid JSON Pointer: ' + dataPointer);\r\n}\n/**\n * 'fixJsonFormOptions' function\r\rRename JSON Form-style 'options' lists to\rAngular Schema Form-style 'titleMap' lists.\r\r\\@param  {any} formObject\r\\@return {any}\n * @param {?} layout\n * @return {?}\n */\nexport function fixJsonFormOptions(layout: any): any {\r\n  if (isObject(layout) || isArray(layout)) {\r\n    forEach(layout, (value, key) => {\r\n      if (isObject(value) && hasOwn(value, 'options') && isObject(value.options)) {\r\n        value.titleMap = value.options;\r\n        delete value.options;\r\n      }\r\n    }, 'top-down');\r\n  }\r\n  return layout;\r\n}\r\n"]}