{"version":3,"sources":["../../../lib/src/shared/convert-json-schema.functions.ts"],"names":[],"mappings":"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","file":"convert-json-schema.functions.js","sourceRoot":"","sourcesContent":["\n/**\n * 'convertJsonSchemaToDraft6' function\r\rConverts JSON Schema version 3 or 4 to JSON Schema version 6\r\rPartially based on geraintluff's JSON Schema 3 to 4 compatibility function\rhttps://github.com/geraintluff/json-schema-compatibility\rAlso uses suggestions from AJV's JSON Schema 4 to 6 migration guide\rhttps://github.com/epoberezkin/ajv/releases/tag/5.0.0\r\r\\@param {object} originalSchema - JSON schema (version 3 or 4)\r\\@return {object} - JSON schema (version 6)\n * @param {?} schema\n * @return {?}\n */\nexport function convertJsonSchemaToDraft6(schema: any): any {\r\n\r\n  const /** @type {?} */ convertTypes = (types, replace: boolean = false): boolean | any[] => {\r\n    let /** @type {?} */ newTypes: any[] = [];\r\n    for (let /** @type {?} */ type of Array.isArray(types) ? types : [types]) {\r\n      if (typeof type === 'object') {\r\n        newTypes.push(type);\r\n        replace = true;\r\n      } else {\r\n        newTypes.push({ 'type': type });\r\n      }\r\n    }\r\n    return replace && newTypes;\r\n  };\r\n\r\n  if (typeof schema !== 'object') { return schema; }\r\n  let /** @type {?} */ newSchema = Array.isArray(schema) ? [].concat(schema) : Object.assign({ }, schema);\r\n\r\n  // convert multiple types to anyOf\r\n  if (newSchema.type) {\r\n    if (typeof newSchema.type !== 'string') {\r\n      let /** @type {?} */ anyOf = convertTypes(newSchema.type);\r\n      if (anyOf) {\r\n        newSchema.anyOf = anyOf;\r\n        delete newSchema.type;\r\n      }\r\n    } else if (newSchema.type === 'any') {\r\n      delete newSchema.type;\r\n    }\r\n  }\r\n\r\n  // convert extends to allOf\r\n  if (newSchema.extends) {\r\n    newSchema.allOf = Array.isArray(newSchema.extends) ?\r\n      newSchema.extends : [newSchema.extends];\r\n    delete newSchema.extends;\r\n  }\r\n\r\n  // convert disallow to not\r\n  if (newSchema.disallow) {\r\n    newSchema.not = (typeof newSchema.disallow === 'string') ?\r\n      { 'type': newSchema.disallow } :\r\n      { 'anyOf': convertTypes(newSchema.disallow, true) };\r\n    delete newSchema.disallow;\r\n  }\r\n\r\n  // move required from individual items to required array\r\n  if (newSchema.properties) {\r\n    let /** @type {?} */ requiredArray = Array.isArray(newSchema.required) ? newSchema.required : [];\r\n    for (let /** @type {?} */ key of Object.keys(newSchema.properties)) {\r\n      if (typeof newSchema.properties[key].required === 'boolean') {\r\n        if (newSchema.properties[key].required) {\r\n          requiredArray.push(key);\r\n        }\r\n        delete newSchema.properties[key].required;\r\n      }\r\n    }\r\n    if (requiredArray.length) { newSchema.required = requiredArray; }\r\n  }\r\n\r\n  // convert dependencies to arrays\r\n  if (newSchema.dependencies) {\r\n    for (let /** @type {?} */ key of Object.keys(newSchema.dependencies)) {\r\n      if (typeof newSchema.dependencies[key] === 'string') {\r\n          newSchema.dependencies[key] = [newSchema.dependencies[key]];\r\n      }\r\n    }\r\n  }\r\n\r\n  // delete boolean required key\r\n  if (typeof newSchema.required === 'boolean') {\r\n    delete newSchema.required;\r\n  }\r\n\r\n  // convert divisibleBy to multipleOf\r\n  if (newSchema.divisibleBy) {\r\n    newSchema.multipleOf = newSchema.divisibleBy;\r\n    delete newSchema.divisibleBy;\r\n  }\r\n\r\n  // fix boolean exclusiveMinimum\r\n  if (newSchema.minimum && newSchema.exclusiveMinimum === true) {\r\n    newSchema.exclusiveMinimum = newSchema.minimum;\r\n    delete newSchema.minimum;\r\n  } else  if (typeof newSchema.exclusiveMinimum !== 'number') {\r\n    delete newSchema.exclusiveMinimum;\r\n  }\r\n\r\n  // fix boolean exclusiveMaximum\r\n  if (newSchema.maximum && newSchema.exclusiveMaximum === true) {\r\n    newSchema.exclusiveMaximum = newSchema.maximum;\r\n    delete newSchema.maximum;\r\n  } else  if (typeof newSchema.exclusiveMaximum !== 'number') {\r\n    delete newSchema.exclusiveMaximum;\r\n  }\r\n\r\n  // update or delete $schema identifier\r\n  if (\r\n    newSchema.$schema === 'http://json-schema.org/draft-03/schema#' ||\r\n    newSchema.$schema === 'http://json-schema.org/draft-04/schema#'\r\n  ) {\r\n    newSchema.$schema = 'http://json-schema.org/draft-06/schema#';\r\n  } else if (newSchema.$schema) {\r\n    delete newSchema.$schema;\r\n  }\r\n\r\n  // convert id to $id\r\n  if (newSchema.id) {\r\n    newSchema.$id = newSchema.id + '-CONVERTED-TO-DRAFT-06';\r\n    delete newSchema.id;\r\n  }\r\n\r\n  // convert sub schemas\r\n  for (let /** @type {?} */ key of Object.keys(newSchema)) {\r\n    if (['properties', 'patternProperties', 'dependencies'].indexOf(key) > -1) {\r\n      for (let /** @type {?} */ subKey of Object.keys(newSchema[key])) {\r\n        newSchema[key][subKey] = convertJsonSchemaToDraft6(newSchema[key][subKey]);\r\n      }\r\n    } else if (key !== 'enum') {\r\n      if (Array.isArray(newSchema[key])) {\r\n        for (let /** @type {?} */ subSchema of newSchema[key]) {\r\n          subSchema = convertJsonSchemaToDraft6(subSchema);\r\n        }\r\n      } else if (typeof newSchema[key] === 'object') {\r\n        newSchema[key] = convertJsonSchemaToDraft6(newSchema[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return newSchema;\r\n}\r\n"]}