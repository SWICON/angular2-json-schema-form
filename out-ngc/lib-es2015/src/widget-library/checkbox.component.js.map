{"version":3,"sources":["../../../lib/src/widget-library/checkbox.component.ts"],"names":[],"mappings":"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","file":"checkbox.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\nimport { JsonSchemaFormService } from '../json-schema-form.service';\nexport class CheckboxComponent implements OnInit {\r\n  formControl: AbstractControl;\r\n  controlName: string;\r\n  controlValue: any;\r\n  controlDisabled: boolean = false;\r\n  boundControl: boolean = false;\r\n  options: any;\r\n  trueValue: any = true;\r\n  falseValue: any = false;\r\n   formID: number;\r\n   layoutNode: any;\r\n   layoutIndex: number[];\r\n   dataIndex: number[];\n/**\n * @param {?} jsf\n */\nconstructor(\nprivate jsf: JsonSchemaFormService\r\n  ) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this.options = this.layoutNode.options || {};\r\n    this.jsf.initializeControl(this);\r\n    if (this.controlValue === null || this.controlValue === undefined) {\r\n      this.controlValue = this.options.title;\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nupdateValue(event) {\r\n    event.preventDefault();\r\n    this.jsf.updateValue(this, event.target.checked ? this.trueValue : this.falseValue);\r\n  }\n/**\n * @return {?}\n */\nget isChecked() {\r\n    return this.jsf.getControlValue(this) === this.trueValue;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'checkbox-widget',\r\n  template: `\r\n    <label\r\n      [attr.for]=\"'control' + layoutNode?._id\"\r\n      [class]=\"options?.itemLabelHtmlClass\">\r\n      <input\r\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\r\n        [checked]=\"isChecked ? 'checked' : null\"\r\n        [class]=\"options?.fieldHtmlClass + (isChecked ?\r\n          (' ' + options?.activeClass + ' ' + options?.style?.selected) :\r\n          (' ' + options?.style?.unselected))\"\r\n        [disabled]=\"controlDisabled\"\r\n        [id]=\"'control' + layoutNode?._id\"\r\n        [name]=\"controlName\"\r\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\r\n        [value]=\"controlValue\"\r\n        type=\"checkbox\"\r\n        (change)=\"updateValue($event)\">\r\n      <span *ngIf=\"options?.title\"\r\n        [style.display]=\"options?.notitle ? 'none' : ''\"\r\n        [innerHTML]=\"options?.title\"></span>\r\n    </label>`,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonSchemaFormService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formID': [{ type: Input },],\n'layoutNode': [{ type: Input },],\n'layoutIndex': [{ type: Input },],\n'dataIndex': [{ type: Input },],\n};\n}\n\nfunction CheckboxComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxComponent.ctorParameters;\n/** @type {?} */\nCheckboxComponent.propDecorators;\n/** @type {?} */\nCheckboxComponent.prototype.formControl;\n/** @type {?} */\nCheckboxComponent.prototype.controlName;\n/** @type {?} */\nCheckboxComponent.prototype.controlValue;\n/** @type {?} */\nCheckboxComponent.prototype.controlDisabled;\n/** @type {?} */\nCheckboxComponent.prototype.boundControl;\n/** @type {?} */\nCheckboxComponent.prototype.options;\n/** @type {?} */\nCheckboxComponent.prototype.trueValue;\n/** @type {?} */\nCheckboxComponent.prototype.falseValue;\n/** @type {?} */\nCheckboxComponent.prototype.formID;\n/** @type {?} */\nCheckboxComponent.prototype.layoutNode;\n/** @type {?} */\nCheckboxComponent.prototype.layoutIndex;\n/** @type {?} */\nCheckboxComponent.prototype.dataIndex;\n/** @type {?} */\nCheckboxComponent.prototype.jsf;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}